\l : #list database

\c testdb; #select a database

\d # list all the tables in the selected database

\d+ #tablename

ALTER USER davide WITH PASSWORD 'hu8jmn3';


CREATE USER <<User>> WITH PASSWORD '<<password>>';
CREATE DATABASE jerry;
GRANT ALL PRIVILEGES ON DATABASE jerry to tom;
 \q
psql -d <<DATABASE>> -U <<user>> -W

-W for Password prompt
CREATE TABLE APP
(
  id bigint NOT NULL,
  jsonproperty jsonb,
  CONSTRAINT myentity_pkey PRIMARY KEY (id)
)

CREATE SCHEMA hollywood;
CREATE TABLE hollywood.films (title text, release date, awards text[]);
CREATE VIEW hollywood.winners AS
    SELECT title, release FROM hollywood.films WHERE awards IS NOT NULL;


testdb=# CREATE USER manisha WITH PASSWORD 'password';
CREATE ROLE



 DROP SCHEMA mystuff CASCADE;
CASCADE
Automatically drop objects (tables, functions, etc.) that are contained in the schema.


GRANT privilege [, ...]
ON object [, ...]
TO { PUBLIC | GROUP group | username }

privilege − values could be: SELECT, INSERT, UPDATE, DELETE, RULE, ALL.

object − The name of an object to which to grant access. The possible objects are: table, view, sequence

PUBLIC − A short form representing all users.

GROUP group − A group to whom to grant privileges.

username − The name of a user to whom to grant privileges. PUBLIC is a short form representing all users.

The privileges can be revoked using the REVOKE command.


Different kinds of privileges in PostgreSQL are −

SELECT,
INSERT,
UPDATE,
DELETE,
TRUNCATE,
REFERENCES,
TRIGGER,
CREATE,
CONNECT,
TEMPORARY,
EXECUTE, and
USAGE
Depending on the type of the object (table, function, etc.,), privileges are applied to the object. To assign privileges to the users, the GRANT command is used.


ALTER TABLE FURTHER_ADVANCE.APP_ID ALTER COLUMN case_id TYPE CHAR(50);

